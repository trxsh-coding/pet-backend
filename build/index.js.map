{"version":3,"sources":["../server/index.js"],"names":["server","require","Server","app","DB_CONNECTION","process","env","port","PORT","io","clients","Map","listen","console","log","on","socket","id","handshake","query","set","socketID","User","findByIdAndUpdate","online","user","callback","lastSeen","Date","now","mongoose","connect","useNewUrlParser","useCreateIndex","useFindAndModify","then","e"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AACA,IAAMA,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBC,MAAhB,CAAuBC,iBAAvB,CAAf;;AACA,IAAMC,aAAa,GAAGC,OAAO,CAACC,GAAR,CAAYF,aAAlC;AACA,IAAMG,IAAI,GAAGF,OAAO,CAACC,GAAR,CAAYE,IAAZ,IAAoB,IAAjC;AACO,IAAMC,EAAE,GAAG,wBAAOT,MAAP,CAAX;;AACA,IAAMU,OAAO,GAAG,IAAIC,GAAJ,EAAhB;;AACPX,MAAM,CAACY,MAAP,CAAcL,IAAI,IAAI,IAAtB,EAA4B;AAAA,SAAMM,OAAO,CAACC,GAAR,iBAAqBP,IAArB,WAAN;AAAA,CAA5B;AAEAE,EAAE,CAACM,EAAH,CAAM,YAAN;AAAA,qEAAoB,kBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,EADY,GACPD,MAAM,CAACE,SAAP,CAAiBC,KAAjB,CAAuBF,EADhB;AAEhBP,YAAAA,OAAO,CAACU,GAAR,CAAYH,EAAZ,EAAgB;AAACI,cAAAA,QAAQ,EAACL,MAAM,CAACC;AAAjB,aAAhB;AACAJ,YAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;;AACAP,8BAAIiB,GAAJ,CAAQ,QAAR,EAAkBJ,MAAlB;;AACAb,8BAAIiB,GAAJ,CAAQ,IAAR,EAAcX,EAAd;;AALgB;AAAA,mBAMGa,iBAAKC,iBAAL,CAAuBN,EAAvB,EAA2B;AAC1CO,cAAAA,MAAM,EAAC;AADmC,aAA3B,CANH;;AAAA;AAMVC,YAAAA,IANU;AAShBT,YAAAA,MAAM,CAACD,EAAP,CAAU,YAAV;AAAA,kFAAwB,iBAAOW,QAAP;AAAA;AAAA;AAAA;AAAA;AACpBb,wBAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ;AACAhB,wBAAAA,OAAO,UAAP,CAAeM,MAAM,CAACE,SAAP,CAAiBC,KAAjB,CAAuBF,EAAtC;AAFoB;AAAA,+BAGdK,iBAAKC,iBAAL,CAAuBN,EAAvB,EAA2B;AAC7BO,0BAAAA,MAAM,EAAC,KADsB;AAE7BG,0BAAAA,QAAQ,EAACC,IAAI,CAACC,GAAL;AAFoB,yBAA3B,CAHc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAxB;;AAAA;AAAA;AAAA;AAAA;;AATgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAAA;AAAA;AAAA;AAAA;;AAmBAC,qBACKC,OADL,CACa3B,aADb,EAC4B;AAAC4B,EAAAA,eAAe,EAAC,IAAjB;AAAuBC,EAAAA,cAAc,EAAC,IAAtC;AAA4CC,EAAAA,gBAAgB,EAAC;AAA7D,CAD5B,EAEKC,IAFL,CAEU;AAAA,SAAMtB,OAAO,CAACC,GAAR,CAAY,uBAAZ,CAAN;AAAA,CAFV,WAGY,UAACsB,CAAD;AAAA,SAAOvB,OAAO,CAACC,GAAR,CAAYsB,CAAZ,CAAP;AAAA,CAHZ","sourcesContent":["import app from '../index.js'\nimport mongoose from 'mongoose'\nimport socket from 'socket.io'\nimport Message from '../models/message'\nimport User from '../models/user'\nconst server = require('http').Server(app);\nconst DB_CONNECTION = process.env.DB_CONNECTION;\nconst port = process.env.PORT || 5000\nexport const io = socket(server);\nexport const clients = new Map()\nserver.listen(port || 3000, () => console.log(`trash ${port} port`));\n\nio.on('connection', async socket => {\n    let id = socket.handshake.query.id\n    clients.set(id, {socketID:socket.id})\n    console.log(clients)\n    app.set('socket', socket);\n    app.set('io', io);\n    const user = await User.findByIdAndUpdate(id, {\n        online:true\n    })\n    socket.on('disconnect', async (callback) => {\n        console.log(callback)\n        clients.delete(socket.handshake.query.id)\n        await User.findByIdAndUpdate(id, {\n            online:false,\n            lastSeen:Date.now()\n        })\n    })\n});\n\nmongoose\n    .connect(DB_CONNECTION, {useNewUrlParser:true, useCreateIndex:true, useFindAndModify:false})\n    .then(() => console.log('u are connected to DB'))\n    .catch( (e) => console.log(e));\n\n"],"file":"index.js"}