{"version":3,"sources":["../server/index.js"],"names":["http","require","process","env","PORT","DB_CONNECTION","server","createServer","app","io","clients","Map","on","socket","id","handshake","query","set","socketID","User","findByIdAndUpdate","online","user","callback","lastSeen","Date","mongoose","connect","useNewUrlParser","useCreateIndex","useFindAndModify","then","console","log","e","listen"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;mBAE8BC,OAAO,CAACC,G;IAA/BC,I,gBAAAA,I;IAAMC,a,gBAAAA,a;AACb,IAAMC,MAAM,GAAGN,IAAI,CAACO,YAAL,CAAkBC,iBAAlB,CAAf;AACO,IAAMC,EAAE,GAAG,wBAAOH,MAAP,CAAX;;AACA,IAAMI,OAAO,GAAG,IAAIC,GAAJ,EAAhB;;AAEPF,EAAE,CAACG,EAAH,CAAM,YAAN;AAAA,qEAAoB,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,EADY,GACPD,MAAM,CAACE,SAAP,CAAiBC,KAAjB,CAAuBF,EADhB;AAEhBJ,YAAAA,OAAO,CAACO,GAAR,CAAYH,EAAZ,EAAgB;AAACI,cAAAA,QAAQ,EAACL,MAAM,CAACC;AAAjB,aAAhB;;AACAN,8BAAIS,GAAJ,CAAQ,QAAR,EAAkBJ,MAAlB;;AACAL,8BAAIS,GAAJ,CAAQ,IAAR,EAAcR,EAAd;;AAJgB;AAAA,mBAKGU,iBAAKC,iBAAL,CAAuBN,EAAvB,EAA2B;AAC1CO,cAAAA,MAAM,EAAC;AADmC,aAA3B,CALH;;AAAA;AAKVC,YAAAA,IALU;AAQhBT,YAAAA,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwB,UAACW,QAAD,EAAc;AAClCb,cAAAA,OAAO,UAAP,CAAeG,MAAM,CAACE,SAAP,CAAiBC,KAAjB,CAAuBF,EAAtC;;AACAK,+BAAKC,iBAAL,CAAuBN,EAAvB,EAA2B;AACvBO,gBAAAA,MAAM,EAAC,KADgB;AAEvBG,gBAAAA,QAAQ,EAAC,IAAIC,IAAJ;AAFc,eAA3B;AAIH,aAND;;AARgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAAA;AAAA;AAAA;AAAA;;AAiBAC,qBACKC,OADL,CACatB,aADb,EAC4B;AAACuB,EAAAA,eAAe,EAAC,IAAjB;AAAuBC,EAAAA,cAAc,EAAC,IAAtC;AAA4CC,EAAAA,gBAAgB,EAAC;AAA7D,CAD5B,EAEKC,IAFL,CAEU;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,uBAAZ,CAAN;AAAA,CAFV,WAGY,UAACC,CAAD;AAAA,SAAOF,OAAO,CAACC,GAAR,CAAYC,CAAZ,CAAP;AAAA,CAHZ;;AAKA5B,MAAM,CAAC6B,MAAP,CAAc/B,IAAd,EAAoB;AAAA,SAAM4B,OAAO,CAACC,GAAR,8BAAkC7B,IAAlC,WAAN;AAAA,CAApB","sourcesContent":["import app from '../index.js'\nimport mongoose from 'mongoose'\nimport socket from 'socket.io'\nimport Message from '../models/message'\nimport User from '../models/user'\n\nconst http = require('http');\n\nconst {PORT, DB_CONNECTION} = process.env;\nconst server = http.createServer(app);\nexport const io = socket(server);\nexport const clients = new Map()\n\nio.on('connection', async socket => {\n    let id = socket.handshake.query.id\n    clients.set(id, {socketID:socket.id})\n    app.set('socket', socket);\n    app.set('io', io);\n    const user = await User.findByIdAndUpdate(id, {\n        online:true\n    })\n    socket.on('disconnect', (callback) => {\n        clients.delete(socket.handshake.query.id)\n        User.findByIdAndUpdate(id, {\n            online:false,\n            lastSeen:new Date()\n        })\n    })\n});\n\nmongoose\n    .connect(DB_CONNECTION, {useNewUrlParser:true, useCreateIndex:true, useFindAndModify:false})\n    .then(() => console.log('u are connected to DB'))\n    .catch( (e) => console.log(e));\n\nserver.listen(PORT, () => console.log(`u are listening to ${PORT} port`));\n"],"file":"index.js"}